/**
 * Get the balance of all nodes
 *
 *
 * @type {{symlink: {(target: PathLike, path: PathLike, type: (symlink.Type | undefined | null), callback: NoParamCallback): void, (target: PathLike, path: PathLike, callback: NoParamCallback): void}, mkdirSync(path: PathLike, options?: (number | string | MakeDirectoryOptions | null)): void, unlinkSync(path: PathLike): void, lchownSync(path: PathLike, uid: number, gid: number): void, linkSync(existingPath: PathLike, newPath: PathLike): void, readlink: {(path: PathLike, options: ({encoding?: BufferEncoding | null | undefined} | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), linkString: string) => void): void, (path: PathLike, options: ({encoding: "buffer"} | "buffer"), callback: (err: (NodeJS.ErrnoException | null), linkString: Buffer) => void): void, (path: PathLike, options: ({encoding?: string | null | undefined} | string | undefined | null), callback: (err: (NodeJS.ErrnoException | null), linkString: (string | Buffer)) => void): void, (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), linkString: string) => void): void}, StatsBase: StatsBase, StatOptions: StatOptions, WriteStream: WriteStream, openSync(path: PathLike, flags: (string | number), mode?: (string | number | null)): number, writevSync(fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number): number, lchmodSync(path: PathLike, mode: (string | number)): void, accessSync(path: PathLike, mode?: number): void, mkdtempSync: {(prefix: string, options?: ({encoding?: BufferEncoding | null | undefined} | BufferEncoding | null)): string, (prefix: string, options: ({encoding: "buffer"} | "buffer")): Buffer, (prefix: string, options?: ({encoding?: string | null | undefined} | string | null)): (string | Buffer)}, futimes: {(fd: number, atime: (string | number | Date), mtime: (string | number | Date), callback: NoParamCallback): void}, fdatasync: {(fd: number, callback: NoParamCallback): void}, fdatasyncSync(fd: number): void, createReadStream(path: PathLike, options?: (string | {flags?: string | undefined, encoding?: string | undefined, fd?: number | undefined, mode?: number | undefined, autoClose?: boolean | undefined, emitClose?: boolean | undefined, start?: number | undefined, end?: number | undefined, highWaterMark?: number | undefined})): ReadStream, WriteVResult: WriteVResult, PathLike: string | Buffer | URL, writev: {(fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, cb: (err: (NodeJS.ErrnoException | null), bytesWritten: number, buffers: NodeJS.ArrayBufferView[]) => void): void, (fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position: number, cb: (err: (NodeJS.ErrnoException | null), bytesWritten: number, buffers: NodeJS.ArrayBufferView[]) => void): void}, fsync: {(fd: number, callback: NoParamCallback): void}, OpenDirOptions: OpenDirOptions, Stats: Stats, access: {(path: PathLike, mode: (number | undefined), callback: NoParamCallback): void, (path: PathLike, callback: NoParamCallback): void}, utimesSync(path: PathLike, atime: (string | number | Date), mtime: (string | number | Date)): void, readSync(fd: number, buffer: NodeJS.ArrayBufferView, offset: number, length: number, position: (number | null)): number, readFileSync: {(path: (PathLike | number), options?: ({encoding?: null | undefined, flag?: string | undefined} | null)): Buffer, (path: (PathLike | number), options: ({encoding: string, flag?: string | undefined} | string)): string, (path: (PathLike | number), options?: ({encoding?: string | null | undefined, flag?: string | undefined} | string | null)): (string | Buffer)}, lstat: {(path: PathLike, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (path: PathLike, options: ((StatOptions & {bigint?: false | undefined}) | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (path: PathLike, options: (StatOptions & {bigint: true}), callback: (err: (NodeJS.ErrnoException | null), stats: BigIntStats) => void): void, (path: PathLike, options: (StatOptions | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: (Stats | BigIntStats)) => void): void}, lchown: {(path: PathLike, uid: number, gid: number, callback: NoParamCallback): void}, unlink: {(path: PathLike, callback: NoParamCallback): void}, promises: promises, NoParamCallback: (err: (NodeJS.ErrnoException | null)) => void, futimesSync(fd: number, atime: (string | number | Date), mtime: (string | number | Date)): void, renameSync(oldPath: PathLike, newPath: PathLike): void, chownSync(path: PathLike, uid: number, gid: number): void, fstatSync: {(fd: number, options?: (StatOptions & {bigint?: false | undefined})): Stats, (fd: number, options: (StatOptions & {bigint: true})): BigIntStats, (fd: number, options?: StatOptions): (Stats | BigIntStats)}, readFile: {(path: (PathLike | number), options: ({encoding?: null | undefined, flag?: string | undefined} | undefined | null), callback: (err: (NodeJS.ErrnoException | null), data: Buffer) => void): void, (path: (PathLike | number), options: ({encoding: string, flag?: string | undefined} | string), callback: (err: (NodeJS.ErrnoException | null), data: string) => void): void, (path: (PathLike | number), options: ({encoding?: string | null | undefined, flag?: string | undefined} | string | undefined | null), callback: (err: (NodeJS.ErrnoException | null), data: (string | Buffer)) => void): void, (path: (PathLike | number), callback: (err: (NodeJS.ErrnoException | null), data: Buffer) => void): void}, mkdtemp: {(prefix: string, options: ({encoding?: BufferEncoding | null | undefined} | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), folder: string) => void): void, (prefix: string, options: ("buffer" | {encoding: "buffer"}), callback: (err: (NodeJS.ErrnoException | null), folder: Buffer) => void): void, (prefix: string, options: ({encoding?: string | null | undefined} | string | undefined | null), callback: (err: (NodeJS.ErrnoException | null), folder: (string | Buffer)) => void): void, (prefix: string, callback: (err: (NodeJS.ErrnoException | null), folder: string) => void): void}, fchownSync(fd: number, uid: number, gid: number): void, chmod: {(path: PathLike, mode: (string | number), callback: NoParamCallback): void}, BigIntOptions: BigIntOptions, rmdirSync(path: PathLike, options?: RmDirOptions): void, fchmodSync(fd: number, mode: (string | number)): void, constants: constants, existsSync(path: PathLike): boolean, Dir: Dir, truncate: {(path: PathLike, len: (number | undefined | null), callback: NoParamCallback): void, (path: PathLike, callback: NoParamCallback): void}, mkdir: {(path: PathLike, options: (number | string | MakeDirectoryOptions | undefined | null), callback: NoParamCallback): void, (path: PathLike, callback: NoParamCallback): void}, opendirSync(path: PathLike, options?: OpenDirOptions): Dir, read: {<TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: number, length: number, position: (number | null), callback: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffer: TBuffer) => void): void}, watch: {(filename: PathLike, options: ({encoding?: BufferEncoding | null | undefined, persistent?: boolean | undefined, recursive?: boolean | undefined} | BufferEncoding | undefined | null), listener?: (event: string, filename: string) => void): FSWatcher, (filename: PathLike, options: ({encoding: "buffer", persistent?: boolean | undefined, recursive?: boolean | undefined} | "buffer"), listener?: (event: string, filename: Buffer) => void): FSWatcher, (filename: PathLike, options: ({encoding?: string | null | undefined, persistent?: boolean | undefined, recursive?: boolean | undefined} | string | null), listener?: (event: string, filename: (string | Buffer)) => void): FSWatcher, (filename: PathLike, listener?: (event: string, filename: string) => any): FSWatcher}, readlinkSync: {(path: PathLike, options?: ({encoding?: BufferEncoding | null | undefined} | BufferEncoding | null)): string, (path: PathLike, options: ({encoding: "buffer"} | "buffer")): Buffer, (path: PathLike, options?: ({encoding?: string | null | undefined} | string | null)): (string | Buffer)}, ReadStream: ReadStream, appendFile: {(file: (PathLike | number), data: any, options: WriteFileOptions, callback: NoParamCallback): void, (file: (PathLike | number), data: any, callback: NoParamCallback): void}, watchFile: {(filename: PathLike, options: ({persistent?: boolean | undefined, interval?: number | undefined} | undefined), listener: (curr: Stats, prev: Stats) => void): void, (filename: PathLike, listener: (curr: Stats, prev: Stats) => void): void}, fchmod: {(fd: number, mode: (string | number), callback: NoParamCallback): void}, writeFile: {(path: (PathLike | number), data: any, options: WriteFileOptions, callback: NoParamCallback): void, (path: (PathLike | number), data: any, callback: NoParamCallback): void}, link: {(existingPath: PathLike, newPath: PathLike, callback: NoParamCallback): void}, unwatchFile(filename: PathLike, listener?: (curr: Stats, prev: Stats) => void): void, realpath: {(path: PathLike, options: ({encoding?: BufferEncoding | null | undefined} | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), resolvedPath: string) => void): void, (path: PathLike, options: ({encoding: "buffer"} | "buffer"), callback: (err: (NodeJS.ErrnoException | null), resolvedPath: Buffer) => void): void, (path: PathLike, options: ({encoding?: string | null | undefined} | string | undefined | null), callback: (err: (NodeJS.ErrnoException | null), resolvedPath: (string | Buffer)) => void): void, (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), resolvedPath: string) => void): void}, createWriteStream(path: PathLike, options?: (string | {flags?: string | undefined, encoding?: string | undefined, fd?: number | undefined, mode?: number | undefined, autoClose?: boolean | undefined, emitClose?: boolean | undefined, start?: number | undefined, highWaterMark?: number | undefined})): WriteStream, appendFileSync(file: (PathLike | number), data: any, options?: WriteFileOptions): void, truncateSync(path: PathLike, len?: (number | null)): void, MakeDirectoryOptions: MakeDirectoryOptions, readdir: {(path: PathLike, options: ({encoding: BufferEncoding | null, withFileTypes?: false | undefined} | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), files: string[]) => void): void, (path: PathLike, options: ({encoding: "buffer", withFileTypes?: false | undefined} | "buffer"), callback: (err: (NodeJS.ErrnoException | null), files: Buffer[]) => void): void, (path: PathLike, options: ({encoding?: string | null | undefined, withFileTypes?: false | undefined} | string | undefined | null), callback: (err: (NodeJS.ErrnoException | null), files: (string[] | Buffer[])) => void): void, (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), files: string[]) => void): void, (path: PathLike, options: {encoding?: string | null | undefined, withFileTypes: true}, callback: (err: (NodeJS.ErrnoException | null), files: Dirent[]) => void): void}, rmdir: {(path: PathLike, callback: NoParamCallback): void, (path: PathLike, options: RmDirOptions, callback: NoParamCallback): void}, lchmod: {(path: PathLike, mode: (string | number), callback: NoParamCallback): void}, copyFileSync(src: PathLike, dest: PathLike, flags?: number): void, fsyncSync(fd: number): void, readdirSync: {(path: PathLike, options?: ({encoding: BufferEncoding | null, withFileTypes?: false | undefined} | BufferEncoding | null)): string[], (path: PathLike, options: ({encoding: "buffer", withFileTypes?: false | undefined} | "buffer")): Buffer[], (path: PathLike, options?: ({encoding?: string | null | undefined, withFileTypes?: false | undefined} | string | null)): (string[] | Buffer[]), (path: PathLike, options: {encoding?: string | null | undefined, withFileTypes: true}): Dirent[]}, open: {(path: PathLike, flags: (string | number), mode: (string | number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), fd: number) => void): void, (path: PathLike, flags: (string | number), callback: (err: (NodeJS.ErrnoException | null), fd: number) => void): void}, FSWatcher: FSWatcher, fchown: {(fd: number, uid: number, gid: number, callback: NoParamCallback): void}, writeFileSync(path: (PathLike | number), data: any, options?: WriteFileOptions): void, writeSync: {(fd: number, buffer: NodeJS.ArrayBufferView, offset?: (number | null), length?: (number | null), position?: (number | null)): number, (fd: number, string: any, position?: (number | null), encoding?: (string | null)): number}, close: {(fd: number, callback: NoParamCallback): void}, stat: {(path: PathLike, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (path: PathLike, options: ((StatOptions & {bigint?: false | undefined}) | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (path: PathLike, options: (StatOptions & {bigint: true}), callback: (err: (NodeJS.ErrnoException | null), stats: BigIntStats) => void): void, (path: PathLike, options: (StatOptions | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: (Stats | BigIntStats)) => void): void}, opendir: {(path: PathLike, cb: (err: (NodeJS.ErrnoException | null), dir: Dir) => void): void, (path: PathLike, options: OpenDirOptions, cb: (err: (NodeJS.ErrnoException | null), dir: Dir) => void): void}, RmDirOptions: RmDirOptions, realpathSync: {(path: PathLike, options?: ({encoding?: BufferEncoding | null | undefined} | BufferEncoding | null)): string, (path: PathLike, options: ({encoding: "buffer"} | "buffer")): Buffer, (path: PathLike, options?: ({encoding?: string | null | undefined} | string | null)): (string | Buffer)}, copyFile: {(src: PathLike, dest: PathLike, callback: NoParamCallback): void, (src: PathLike, dest: PathLike, flags: number, callback: NoParamCallback): void}, chmodSync(path: PathLike, mode: (string | number)): void, Dirent: Dirent, rename: {(oldPath: PathLike, newPath: PathLike, callback: NoParamCallback): void}, ftruncate: {(fd: number, len: (number | undefined | null), callback: NoParamCallback): void, (fd: number, callback: NoParamCallback): void}, write: {<TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: (number | undefined | null), length: (number | undefined | null), position: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void): void, <TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: (number | undefined | null), length: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void): void, <TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void): void, <TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void): void, (fd: number, string: any, position: (number | undefined | null), encoding: (string | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, str: string) => void): void, (fd: number, string: any, position: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, str: string) => void): void, (fd: number, string: any, callback: (err: (NodeJS.ErrnoException | null), written: number, str: string) => void): void}, utimes: {(path: PathLike, atime: (string | number | Date), mtime: (string | number | Date), callback: NoParamCallback): void}, WriteFileOptions: {encoding?: string | null | undefined, mode?: number | string | undefined, flag?: string | undefined} | string, symlinkSync(target: PathLike, path: PathLike, type?: (symlink.Type | null)): void, closeSync(fd: number): void, fstat: fstat, statSync: {(path: PathLike, options?: (StatOptions & {bigint?: false | undefined})): Stats, (path: PathLike, options: (StatOptions & {bigint: true})): BigIntStats, (path: PathLike, options?: StatOptions): (Stats | BigIntStats)}, lstatSync: {(path: PathLike, options?: (StatOptions & {bigint?: false | undefined})): Stats, (path: PathLike, options: (StatOptions & {bigint: true})): BigIntStats, (path: PathLike, options?: StatOptions): (Stats | BigIntStats)}, lutimes: {(path: PathLike, atime: (string | number | Date), mtime: (string | number | Date), callback: NoParamCallback): void}, lutimesSync(path: PathLike, atime: (string | number | Date), mtime: (string | number | Date)): void, BigIntStats: BigIntStats, exists: {(path: PathLike, callback: (exists: boolean) => void): void}, chown: {(path: PathLike, uid: number, gid: number, callback: NoParamCallback): void}, ftruncateSync(fd: number, len?: (number | null)): void} | {EncodingOption: ObjectEncodingOptions | "ascii" | "utf8" | "utf-8" | "utf16le" | "ucs2" | "ucs-2" | "base64" | "base64url" | "latin1" | "binary" | "hex", realpathSync: {(path: PathLike, options?: EncodingOption): string, (path: PathLike, options: BufferEncodingOption): Buffer, (path: PathLike, options?: EncodingOption): (string | Buffer)}, read: {<TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: number, length: number, position: (ReadPosition | null), callback: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffer: TBuffer) => void): void}, WatchEventType: "rename" | "change", Stats: Stats, ReadVResult: ReadVResult, lstatSync: StatSyncFn, close: {(fd: number, callback?: NoParamCallback): void}, fstatSync: {(fd: number, options?: (StatOptions & {bigint?: false | undefined})): Stats, (fd: number, options: (StatOptions & {bigint: true})): BigIntStats, (fd: number, options?: StatOptions): (Stats | BigIntStats)}, readdirSync: {(path: PathLike, options?: ({encoding: BufferEncoding | null, withFileTypes?: false | undefined} | BufferEncoding | null)): string[], (path: PathLike, options: ({encoding: "buffer", withFileTypes?: false | undefined} | "buffer")): Buffer[], (path: PathLike, options?: ((ObjectEncodingOptions & {withFileTypes?: false | undefined}) | BufferEncoding | null)): (string[] | Buffer[]), (path: PathLike, options: (ObjectEncodingOptions & {withFileTypes: true})): Dirent[]}, ObjectEncodingOptions: ObjectEncodingOptions, rmdirSync(path: PathLike, options?: RmDirOptions): void, rename: {(oldPath: PathLike, newPath: PathLike, callback: NoParamCallback): void}, createReadStream(path: PathLike, options?: (BufferEncoding | ReadStreamOptions)): ReadStream, lchown: {(path: PathLike, uid: number, gid: number, callback: NoParamCallback): void}, exists: {(path: PathLike, callback: (exists: boolean) => void): void}, truncateSync(path: PathLike, len?: (number | null)): void, unwatchFile(filename: PathLike, listener?: (curr: Stats, prev: Stats) => void): void, statSync: StatSyncFn, fchownSync(fd: number, uid: number, gid: number): void, lutimesSync(path: PathLike, atime: TimeLike, mtime: TimeLike): void, fdatasyncSync(fd: number): void, StatWatcher: StatWatcher, watch: {(filename: PathLike, options: ((WatchOptions & {encoding: "buffer"}) | "buffer"), listener?: WatchListener<Buffer>): FSWatcher, (filename: PathLike, options?: (WatchOptions | BufferEncoding | null), listener?: WatchListener<string>): FSWatcher, (filename: PathLike, options: (WatchOptions | string), listener?: WatchListener<string | Buffer>): FSWatcher, (filename: PathLike, listener?: WatchListener<string>): FSWatcher}, fsync: {(fd: number, callback: NoParamCallback): void}, link: {(existingPath: PathLike, newPath: PathLike, callback: NoParamCallback): void}, utimesSync(path: PathLike, atime: TimeLike, mtime: TimeLike): void, unlink: {(path: PathLike, callback: NoParamCallback): void}, realpath: {(path: PathLike, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), resolvedPath: string) => void): void, (path: PathLike, options: BufferEncodingOption, callback: (err: (NodeJS.ErrnoException | null), resolvedPath: Buffer) => void): void, (path: PathLike, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), resolvedPath: (string | Buffer)) => void): void, (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), resolvedPath: string) => void): void}, NoParamCallback: (err: (NodeJS.ErrnoException | null)) => void, OpenDirOptions: OpenDirOptions, readFileSync: {(path: PathOrFileDescriptor, options?: ({encoding?: null | undefined, flag?: string | undefined} | null)): Buffer, (path: PathOrFileDescriptor, options: ({encoding: BufferEncoding, flag?: string | undefined} | BufferEncoding)): string, (path: PathOrFileDescriptor, options?: ((ObjectEncodingOptions & {flag?: string | undefined}) | BufferEncoding | null)): (string | Buffer)}, createWriteStream(path: PathLike, options?: (BufferEncoding | StreamOptions)): WriteStream, readlinkSync: {(path: PathLike, options?: EncodingOption): string, (path: PathLike, options: BufferEncodingOption): Buffer, (path: PathLike, options?: EncodingOption): (string | Buffer)}, chmod: {(path: PathLike, mode: Mode, callback: NoParamCallback): void}, TimeLike: string | number | Date, BigIntStats: BigIntStats, mkdtempSync: {(prefix: string, options?: EncodingOption): string, (prefix: string, options: BufferEncodingOption): Buffer, (prefix: string, options?: EncodingOption): (string | Buffer)}, appendFile: {(path: PathOrFileDescriptor, data: (string | Uint8Array), options: WriteFileOptions, callback: NoParamCallback): void, (file: PathOrFileDescriptor, data: (string | Uint8Array), callback: NoParamCallback): void}, StatSyncFn: StatSyncFn, appendFileSync(path: PathOrFileDescriptor, data: (string | Uint8Array), options?: WriteFileOptions): void, readlink: {(path: PathLike, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), linkString: string) => void): void, (path: PathLike, options: BufferEncodingOption, callback: (err: (NodeJS.ErrnoException | null), linkString: Buffer) => void): void, (path: PathLike, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), linkString: (string | Buffer)) => void): void, (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), linkString: string) => void): void}, fchmodSync(fd: number, mode: Mode): void, lstat: {(path: PathLike, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (path: PathLike, options: ((StatOptions & {bigint?: false | undefined}) | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (path: PathLike, options: (StatOptions & {bigint: true}), callback: (err: (NodeJS.ErrnoException | null), stats: BigIntStats) => void): void, (path: PathLike, options: (StatOptions | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: (Stats | BigIntStats)) => void): void}, WriteStream: WriteStream, WriteFileOptions: {encoding?: string | null | undefined, mode?: number | string | undefined, flag?: string | undefined} | string, StatSyncOptions: StatSyncOptions, ReadSyncOptions: ReadSyncOptions, copyFile: {(src: PathLike, dest: PathLike, callback: NoParamCallback): void, (src: PathLike, dest: PathLike, mode: number, callback: NoParamCallback): void}, opendirSync(path: PathLike, options?: OpenDirOptions): Dir, readvSync(fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number): number, cp: {(source: string, destination: string, callback: (err: (NodeJS.ErrnoException | null)) => void): void, (source: string, destination: string, opts: CopyOptions, callback: (err: (NodeJS.ErrnoException | null)) => void): void}, Dir: Dir, readdir: {(path: PathLike, options: ({encoding: BufferEncoding | null, withFileTypes?: false | undefined} | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), files: string[]) => void): void, (path: PathLike, options: ({encoding: "buffer", withFileTypes?: false | undefined} | "buffer"), callback: (err: (NodeJS.ErrnoException | null), files: Buffer[]) => void): void, (path: PathLike, options: ((ObjectEncodingOptions & {withFileTypes?: false | undefined}) | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), files: (string[] | Buffer[])) => void): void, (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), files: string[]) => void): void, (path: PathLike, options: (ObjectEncodingOptions & {withFileTypes: true}), callback: (err: (NodeJS.ErrnoException | null), files: Dirent[]) => void): void}, existsSync(path: PathLike): boolean, lutimes: {(path: PathLike, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback): void}, stat: {(path: PathLike, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (path: PathLike, options: ((StatOptions & {bigint?: false | undefined}) | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (path: PathLike, options: (StatOptions & {bigint: true}), callback: (err: (NodeJS.ErrnoException | null), stats: BigIntStats) => void): void, (path: PathLike, options: (StatOptions | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: (Stats | BigIntStats)) => void): void}, accessSync(path: PathLike, mode?: number): void, openSync(path: PathLike, flags: OpenMode, mode?: (Mode | null)): number, StatOptions: StatOptions, access: {(path: PathLike, mode: (number | undefined), callback: NoParamCallback): void, (path: PathLike, callback: NoParamCallback): void}, opendir: {(path: PathLike, cb: (err: (NodeJS.ErrnoException | null), dir: Dir) => void): void, (path: PathLike, options: OpenDirOptions, cb: (err: (NodeJS.ErrnoException | null), dir: Dir) => void): void}, rmdir: {(path: PathLike, callback: NoParamCallback): void, (path: PathLike, options: RmDirOptions, callback: NoParamCallback): void}, write: {<TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: (number | undefined | null), length: (number | undefined | null), position: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void): void, <TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: (number | undefined | null), length: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void): void, <TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void): void, <TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void): void, (fd: number, string: string, position: (number | undefined | null), encoding: (BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, str: string) => void): void, (fd: number, string: string, position: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, str: string) => void): void, (fd: number, string: string, callback: (err: (NodeJS.ErrnoException | null), written: number, str: string) => void): void}, PathOrFileDescriptor: string | Buffer | URL | number, RmDirOptions: RmDirOptions, Dirent: Dirent, CopyOptions: CopyOptions, lchownSync(path: PathLike, uid: number, gid: number): void, fchown: {(fd: number, uid: number, gid: number, callback: NoParamCallback): void}, promises: {rename(oldPath: PathLike, newPath: PathLike): Promise<void>, opendir(path: PathLike, options?: OpenDirOptions): Promise<Dir>, lchmod(path: PathLike, mode: Mode): Promise<void>, readdir: {(path: PathLike, options?: ((ObjectEncodingOptions & {withFileTypes?: false | undefined}) | BufferEncoding | null)): Promise<string[]>, (path: PathLike, options: ({encoding: "buffer", withFileTypes?: false | undefined} | "buffer")): Promise<Buffer[]>, (path: PathLike, options?: ((ObjectEncodingOptions & {withFileTypes?: false | undefined}) | BufferEncoding | null)): Promise<string[] | Buffer[]>, (path: PathLike, options: (ObjectEncodingOptions & {withFileTypes: true})): Promise<Dirent[]>}, realpath: {(path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string>, (path: PathLike, options: BufferEncodingOption): Promise<Buffer>, (path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string | Buffer>}, FileReadOptions: FileReadOptions, symlink(target: PathLike, path: PathLike, type?: (string | null)): Promise<void>, link(existingPath: PathLike, newPath: PathLike): Promise<void>, open(path: PathLike, flags: (string | number), mode?: Mode): Promise<FileHandle>, lchown(path: PathLike, uid: number, gid: number): Promise<void>, CreateWriteStreamOptions: CreateWriteStreamOptions, cp(source: string, destination: string, opts?: CopyOptions): Promise<void>, chown(path: PathLike, uid: number, gid: number): Promise<void>, FileReadResult: FileReadResult, FileChangeInfo: FileChangeInfo, readFile: {(path: (PathLike | FileHandle), options?: (({encoding?: null | undefined, flag?: OpenMode | undefined} & Abortable) | null)): Promise<Buffer>, (path: (PathLike | FileHandle), options: (({encoding: BufferEncoding, flag?: OpenMode | undefined} & Abortable) | BufferEncoding)): Promise<string>, (path: (PathLike | FileHandle), options?: ((ObjectEncodingOptions & Abortable & {flag?: OpenMode | undefined}) | BufferEncoding | null)): Promise<string | Buffer>}, readlink: {(path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string>, (path: PathLike, options: BufferEncodingOption): Promise<Buffer>, (path: PathLike, options?: (ObjectEncodingOptions | string | null)): Promise<string | Buffer>}, mkdir: {(path: PathLike, options: (MakeDirectoryOptions & {recursive: true})): Promise<string | undefined>, (path: PathLike, options?: (Mode | (MakeDirectoryOptions & {recursive?: false | undefined}) | null)): Promise<void>, (path: PathLike, options?: (Mode | MakeDirectoryOptions | null)): Promise<string | undefined>}, watch: {(filename: PathLike, options: ((WatchOptions & {encoding: "buffer"}) | "buffer")): AsyncIterable<FileChangeInfo<Buffer>>, (filename: PathLike, options?: (WatchOptions | BufferEncoding)): AsyncIterable<FileChangeInfo<string>>, (filename: PathLike, options: (WatchOptions | string)): (AsyncIterable<FileChangeInfo<string>> | AsyncIterable<FileChangeInfo<Buffer>>)}, appendFile(path: (PathLike | FileHandle), data: (string | Uint8Array), options?: ((ObjectEncodingOptions & FlagAndOpenMode) | BufferEncoding | null)): Promise<void>, access(path: PathLike, mode?: number): Promise<void>, CreateReadStreamOptions: CreateReadStreamOptions, copyFile(src: PathLike, dest: PathLike, mode?: number): Promise<void>, lstat: {(path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})): Promise<Stats>, (path: PathLike, opts: (StatOptions & {bigint: true})): Promise<BigIntStats>, (path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>}, unlink(path: PathLike): Promise<void>, stat: {(path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})): Promise<Stats>, (path: PathLike, opts: (StatOptions & {bigint: true})): Promise<BigIntStats>, (path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>}, truncate(path: PathLike, len?: number): Promise<void>, writeFile(file: (PathLike | FileHandle), data: (string | NodeJS.ArrayBufferView | Iterable<string | NodeJS.ArrayBufferView> | AsyncIterable<string | NodeJS.ArrayBufferView> | Stream), options?: ((ObjectEncodingOptions & {mode?: Mode | undefined, flag?: OpenMode | undefined} & Abortable) | BufferEncoding | null)): Promise<void>, lutimes(path: PathLike, atime: (string | number | Date), mtime: (string | number | Date)): Promise<void>, rm(path: PathLike, options?: RmOptions): Promise<void>, FileHandle: FileHandle, mkdtemp: {(prefix: string, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string>, (prefix: string, options: BufferEncodingOption): Promise<Buffer>, (prefix: string, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string | Buffer>}, chmod(path: PathLike, mode: Mode): Promise<void>, utimes(path: PathLike, atime: (string | number | Date), mtime: (string | number | Date)): Promise<void>, FlagAndOpenMode: FlagAndOpenMode, rmdir(path: PathLike, options?: RmDirOptions): Promise<void>}, closeSync(fd: number): void, writeFileSync(file: PathOrFileDescriptor, data: (string | NodeJS.ArrayBufferView), options?: WriteFileOptions): void, readv: {(fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, cb: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffers: NodeJS.ArrayBufferView[]) => void): void, (fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position: number, cb: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffers: NodeJS.ArrayBufferView[]) => void): void}, ReadStream: ReadStream, renameSync(oldPath: PathLike, newPath: PathLike): void, chmodSync(path: PathLike, mode: Mode): void, ftruncate: {(fd: number, len: (number | undefined | null), callback: NoParamCallback): void, (fd: number, callback: NoParamCallback): void}, RmOptions: RmOptions, readFile: {(path: PathOrFileDescriptor, options: (({encoding?: null | undefined, flag?: string | undefined} & Abortable) | undefined | null), callback: (err: (NodeJS.ErrnoException | null), data: Buffer) => void): void, (path: PathOrFileDescriptor, options: (({encoding: BufferEncoding, flag?: string | undefined} & Abortable) | BufferEncoding), callback: (err: (NodeJS.ErrnoException | null), data: string) => void): void, (path: PathOrFileDescriptor, options: ((ObjectEncodingOptions & {flag?: string | undefined} & Abortable) | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), data: (string | Buffer)) => void): void, (path: PathOrFileDescriptor, callback: (err: (NodeJS.ErrnoException | null), data: Buffer) => void): void}, symlink: {(target: PathLike, path: PathLike, type: (symlink.Type | undefined | null), callback: NoParamCallback): void, (target: PathLike, path: PathLike, callback: NoParamCallback): void}, fsyncSync(fd: number): void, mkdirSync: {(path: PathLike, options: (MakeDirectoryOptions & {recursive: true})): (string | undefined), (path: PathLike, options?: (Mode | (MakeDirectoryOptions & {recursive?: false | undefined}) | null)): void, (path: PathLike, options?: (Mode | MakeDirectoryOptions | null)): (string | undefined)}, lchmodSync(path: PathLike, mode: Mode): void, linkSync(existingPath: PathLike, newPath: PathLike): void, symlinkSync(target: PathLike, path: PathLike, type?: (symlink.Type | null)): void, rmSync(path: PathLike, options?: RmOptions): void, chown: {(path: PathLike, uid: number, gid: number, callback: NoParamCallback): void}, constants: constants, MakeDirectoryOptions: MakeDirectoryOptions, ReadPosition: number | bigint, WatchListener: (event: WatchEventType, filename: T) => void, lchmod: {(path: PathLike, mode: Mode, callback: NoParamCallback): void}, writeFile: {(file: PathOrFileDescriptor, data: (string | NodeJS.ArrayBufferView), options: WriteFileOptions, callback: NoParamCallback): void, (path: PathOrFileDescriptor, data: (string | NodeJS.ArrayBufferView), callback: NoParamCallback): void}, ftruncateSync(fd: number, len?: (number | null)): void, PathLike: string | Buffer | URL, readSync: {(fd: number, buffer: NodeJS.ArrayBufferView, offset: number, length: number, position: (ReadPosition | null)): number, (fd: number, buffer: NodeJS.ArrayBufferView, opts?: ReadSyncOptions): number}, writevSync(fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number): number, BigIntOptions: BigIntOptions, futimesSync(fd: number, atime: TimeLike, mtime: TimeLike): void, writeSync: {(fd: number, buffer: NodeJS.ArrayBufferView, offset?: (number | null), length?: (number | null), position?: (number | null)): number, (fd: number, string: string, position?: (number | null), encoding?: (BufferEncoding | null)): number}, watchFile: {(filename: PathLike, options: ((WatchFileOptions & {bigint?: false | undefined}) | undefined), listener: (curr: Stats, prev: Stats) => void): StatWatcher, (filename: PathLike, options: ((WatchFileOptions & {bigint: true}) | undefined), listener: (curr: BigIntStats, prev: BigIntStats) => void): StatWatcher, (filename: PathLike, listener: (curr: Stats, prev: Stats) => void): StatWatcher}, mkdtemp: {(prefix: string, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), folder: string) => void): void, (prefix: string, options: ("buffer" | {encoding: "buffer"}), callback: (err: (NodeJS.ErrnoException | null), folder: Buffer) => void): void, (prefix: string, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), folder: (string | Buffer)) => void): void, (prefix: string, callback: (err: (NodeJS.ErrnoException | null), folder: string) => void): void}, unlinkSync(path: PathLike): void, chownSync(path: PathLike, uid: number, gid: number): void, WatchFileOptions: WatchFileOptions, futimes: {(fd: number, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback): void}, StatsBase: StatsBase, BufferEncodingOption: "buffer" | {encoding: "buffer"}, Mode: number | string, open: {(path: PathLike, flags: OpenMode, mode: (Mode | undefined | null), callback: (err: (NodeJS.ErrnoException | null), fd: number) => void): void, (path: PathLike, flags: OpenMode, callback: (err: (NodeJS.ErrnoException | null), fd: number) => void): void}, fdatasync: {(fd: number, callback: NoParamCallback): void}, WriteVResult: WriteVResult, utimes: {(path: PathLike, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback): void}, WatchOptions: WatchOptions, FSWatcher: FSWatcher, fstat: {(fd: number, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (fd: number, options: ((StatOptions & {bigint?: false | undefined}) | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (fd: number, options: (StatOptions & {bigint: true}), callback: (err: (NodeJS.ErrnoException | null), stats: BigIntStats) => void): void, (fd: number, options: (StatOptions | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: (Stats | BigIntStats)) => void): void}, writev: {(fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, cb: (err: (NodeJS.ErrnoException | null), bytesWritten: number, buffers: NodeJS.ArrayBufferView[]) => void): void, (fd: number, buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position: number, cb: (err: (NodeJS.ErrnoException | null), bytesWritten: number, buffers: NodeJS.ArrayBufferView[]) => void): void}, cpSync(source: string, destination: string, opts?: CopyOptions): void, copyFileSync(src: PathLike, dest: PathLike, mode?: number): void, OpenMode: number | string, mkdir: {(path: PathLike, options: (MakeDirectoryOptions & {recursive: true}), callback: (err: (NodeJS.ErrnoException | null), path?: string) => void): void, (path: PathLike, options: (Mode | (MakeDirectoryOptions & {recursive?: false | undefined}) | null | undefined), callback: NoParamCallback): void, (path: PathLike, options: (Mode | MakeDirectoryOptions | null | undefined), callback: (err: (NodeJS.ErrnoException | null), path?: string) => void): void, (path: PathLike, callback: NoParamCallback): void}, fchmod: {(fd: number, mode: Mode, callback: NoParamCallback): void}, truncate: {(path: PathLike, len: (number | undefined | null), callback: NoParamCallback): void, (path: PathLike, callback: NoParamCallback): void}, rm: {(path: PathLike, callback: NoParamCallback): void, (path: PathLike, options: RmOptions, callback: NoParamCallback): void}}}
 */

const fs = require('fs');
const Web3 = require('web3');
const web3 = new Web3('http://localhost:8547');

fs.readFile(`${__dirname}/accounts.txt`, (err, data) => {
    if (err) return err;
    let val = data.toString().split('\n');
    val.pop();
    val = val.map(((value) => '0x'+value));

    // gets balance for all N addresses generated, (will always be 0 if new address)
    async function getBalance() {
        for (const addr of val) {
            const raw_bal = await web3.eth.getBalance(addr);
            const bal = web3.utils.fromWei(raw_bal,'ether');
            console.log(addr, "balance is:", bal, "ETH");
        }
    }
    getBalance();
});
